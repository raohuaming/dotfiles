"定义快捷键的前缀,即<Leader>
let mapleader=";"
set background=dark
colorscheme 0x7A69_dark

""
"" Basic Setup
""
set number            " Show line numbers
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides
set encoding=utf-8    " Set default encoding to UTF-8

""
"" Whitespace
""
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
set textwidth=120
set colorcolumn=+10

if exists("g:enable_mvim_shift_arrow")
  let macvim_hig_shift_movement = 1 " mvim shift-arrow-keys
endif

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
""
"" Searching
""
set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter


" 定义快捷键到行首和行尾
nmap lh 0
nmap le $
" 定义快捷键关闭当前分割窗口
nmap <Leader>q :q<CR>
" 定义快捷键保持当前窗口内容
nmap <Leader>w :w<CR>
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>p "+p
" 设置快捷键在QuickFix中移动
nmap ,cn :cn<cr>
nmap ,cp :cp<cr>
nmap ,ccl :ccl<cr>
nmap ,cw :cw 10<cr> 
nmap ,en :lne<cr>
nmap ,ep :lp<cr>
nmap ,ecl :lcl<cr>
nmap ,ew :lw 10<cr> 
" Spell Check
"setlocal spell
"set spelllang=en
set complete+=kspell
"设置快捷键 gs 遍历各分割窗口。快捷键速记法:goto the next spilt window
" nnoremap <Leader>gs <C-W><C-W>
" bind K to grep word under cursor"
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
nmap <Leader>s :syntax on<CR>
set foldmethod=syntax
" tell vim to keep a backup file
set backup
" tell vim where to put its backup files
set backupdir=~/.vim/tmp
" tell vim where to put swap files
set dir=~/.vim/tmp

" Mappings
" format the entire file
nmap <leader>fef ggVG=
" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q
" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

""""""""""""""
"  NeRDTree  "
""""""""""""""
"使用 NERDTree 插件查看工程文件。设置快捷键,速记:file list 
"unmap <Leader>n
"nmap <Leader>n :NERDTreeToggle<CR>
"设置 NERDTree 子窗口宽度
let NERDTreeWinSize=30
"设置 NERDTree 子窗口位置 
let NERDTreeWinPos="left"
let g:NERDTreeShowHidden=1

"""""""""
"  ACK  "
"""""""""
nmap <Leader>f :Ack<space>
if executable("ag")
  let g:ackprg = 'ag --nogroup --nocolor --column'
  "let g:ackprg = 'ag --vimgrep'
endif

""""""""""""""
"  Fugitive  "
""""""""""""""
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gs :Gstatus<CR>
nmap <Leader>gd :Gdiff<CR>
nmap <Leader>gl :Glog<CR>
nmap <Leader>gc :Gcommit<CR>
nmap <Leader>gp :Git push<CR>

""""""""""""""""
"  Ctrl Space  "
""""""""""""""""
set nocompatible
set hidden
"set showtabline=0
let g:CtrlSpaceUseTabline = 1
if executable("ag")
  let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif
nnoremap <silent><C-p> :CtrlSpace O<CR>
let g:CtrlSpaceSaveWorkspaceOnExit = 1
let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
hi link CtrlSpaceSearch IncSearch

"""""""""""""""
"  Syntastic  "
"""""""""""""""
let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['flow', 'eslint']
"let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_dockerfile_checkers = ['hadolint']

"""""""""""""""""
"  Neocomplete  "
"""""""""""""""""
let g:neocomplete#enable_at_startup = 1

let g:UltiSnipsExpandTrigger="<Leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

""""""""""""""""
"  EasyMotion  "
""""""""""""""""
let g:EasyMotion_do_mapping = 0 " Disable default mappings
" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

""""""""""""
"  Tagbar  "
""""""""""""

nmap <Leader>t :TagbarToggle<CR>

""""""""""""
"  vimtex  "
""""""""""""
let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '@line @pdf @tex'


""""""""""""""
"  Prettier  "
""""""""""""""
nmap <Leader>p <Plug>(Prettier)
